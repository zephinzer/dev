image: golang:1.14
stages:
  - init
  - test & build
  - release
  - package
  - publish

init:
  stage: init
  image: usvc/ci:go-dependencies
  cache:
    key: ${CI_COMMIT_REF_NAME}
    paths: ["./vendor"]
  artifacts:
    paths: ["./vendor"]
  script: ["entrypoint"]

unit test:
  stage: test & build
  image: usvc/ci:go-test
  dependencies: ["init"]
  artifacts:
    paths: ["./c.out"]
  script: ["entrypoint"]

.build:
  image: usvc/ci:go-build-production
  stage: test & build
  dependencies: ["init"]
  artifacts:
    paths: ["./bin/*"]
  variables:
    BIN_NAME: dev
  before_script: ["git fetch"]
  script: ["entrypoint"]
.build_linux:
  extends: .build
  variables:
    GOOS: linux
    GOARCH: amd64
build linux (test):
  extends: .build_linux
  only: ["master"]
build linux:
  extends: .build_linux
  only: ["tags"]
.build_macos:
  extends: .build
  variables:
    GOOS: darwin
    GOARCH: amd64
build macos (test):
  extends: .build_macos
  only: ["master"]
build macos:
  extends: .build_macos
  only: ["tags"]
.build_windows:
  extends: .build
  variables:
    GOOS: windows
    GOARCH: "386"
build windows (test):
  extends: .build_windows
  only: ["master"]
build windows:
  extends: .build_windows
  only: ["tags"]

version bump:
  stage: release
  only: ["master"]
  image: usvc/ci:version-bump-gitlab
  script: ["entrypoint"]

# coverage report:
#   allow_failure: true
#   stage: release
#   dependencies: ["unit test"]
#   image: usvc/ci:go-coverage-code-climate
#   script: ["entrypoint"]

compress:
  stage: package
  only: ["tags"]
  # allow failure because it's not necessary to always compress
  # even though that would be nice
  allow_failure: true
  dependencies: ["build linux", "build macos", "build windows"]
  artifacts:
    paths: ["./bin/*"]
  before_script:
    - apt-get update && apt-get upgrade -y
    - apt-get install -y make g++ upx
  script:
    - GOOS=linux GOARCH=amd64 make compress
    - GOOS=darwin GOARCH=amd64 make compress
    - GOOS=windows GOARCH=386 BIN_EXT=.exe make compress

# dockerize:
#   stage: package
#   only: ["tags"]
#   services: ["docker:19.03.1-dind"]
#   image: usvc/ci:docker-build
#   artifacts:
#     paths: ["./build/*"]
#   variables:
#     DOCKER_IMAGE_URL: usvc/dev
#   script: ["entrypoint"]

# dockerhub:
#   stage: publish
#   only: ["tags"]
#   services: ["docker:19.03.1-dind"]
#   image: usvc/ci:docker-publish
#   dependencies: ["dockerize"]
#   variables:
#     DOCKER_IMAGE_URL: usvc/dev
#   script: ["entrypoint"]
